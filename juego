<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juego de Memoria - Memorama</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #333;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .game-info {
            display: flex;
            gap: 30px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .info-box {
            background: rgba(255, 255, 255, 0.9);
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            text-align: center;
            min-width: 120px;
        }

        .info-box h3 {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 5px;
        }

        .info-box .value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #764ba2;
        }

        .difficulty-selector {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .difficulty-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            background: white;
            color: #764ba2;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .difficulty-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .difficulty-btn.active {
            background: #764ba2;
            color: white;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            max-width: 600px;
            width: 100%;
        }

        .game-board {
            display: grid;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
        }

        .game-board.easy {
            grid-template-columns: repeat(4, 1fr);
        }

        .game-board.medium {
            grid-template-columns: repeat(6, 1fr);
        }

        .game-board.hard {
            grid-template-columns: repeat(8, 1fr);
        }

        .card {
            aspect-ratio: 1;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            transition: all 0.3s ease;
            position: relative;
            transform-style: preserve-3d;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .card.flipped {
            background: white;
            transform: rotateY(180deg);
        }

        .card.matched {
            background: #4ade80;
            animation: matchPulse 0.5s ease;
        }

        .card.matched:hover {
            transform: none;
            cursor: default;
        }

        @keyframes matchPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .card-content {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            backface-visibility: hidden;
        }

        .card-back {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-size: 1.5rem;
        }

        .card-front {
            transform: rotateY(180deg);
            font-size: 2.5rem;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .btn-primary {
            background: #764ba2;
            color: white;
        }

        .btn-primary:hover {
            background: #5a3785;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        }

        .btn-secondary {
            background: #e0e0e0;
            color: #333;
        }

        .btn-secondary:hover {
            background: #d0d0d0;
            transform: translateY(-2px);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            max-width: 400px;
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal h2 {
            color: #764ba2;
            margin-bottom: 20px;
            font-size: 2rem;
        }

        .modal p {
            margin-bottom: 15px;
            font-size: 1.1rem;
            color: #666;
        }

        .stars {
            font-size: 2rem;
            margin: 20px 0;
        }

        @media (max-width: 600px) {
            h1 {
                font-size: 2rem;
            }
            
            .game-board.hard {
                grid-template-columns: repeat(6, 1fr);
            }
            
            .card {
                font-size: 1.5rem;
            }
            
            .card-front {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>🧠 Juego de Memoria</h1>
        <p>Encuentra todos los pares de cartas iguales</p>
    </header>

    <main>
        <div class="game-info">
            <div class="info-box">
                <h3>Movimientos</h3>
                <div class="value" id="moves">0</div>
            </div>
            <div class="info-box">
                <h3>Tiempo</h3>
                <div class="value" id="timer">00:00</div>
            </div>
            <div class="info-box">
                <h3>Puntuación</h3>
                <div class="value" id="score">0</div>
            </div>
        </div>

        <div class="difficulty-selector">
            <button class="difficulty-btn active" data-level="easy">Fácil (4x4)</button>
            <button class="difficulty-btn" data-level="medium">Medio (6x6)</button>
            <button class="difficulty-btn" data-level="hard">Difícil (8x8)</button>
        </div>

        <div class="game-container">
            <div class="game-board easy" id="gameBoard"></div>
            <div class="controls">
                <button class="btn btn-primary" id="newGameBtn">Nuevo Juego</button>
                <button class="btn btn-secondary" id="pauseBtn">Pausar</button>
            </div>
        </div>
    </main>

    <div class="modal" id="winModal">
        <div class="modal-content">
            <h2>🎉 ¡Felicidades!</h2>
            <p>Has completado el juego</p>
            <div class="stars" id="stars"></div>
            <p>Movimientos: <strong id="finalMoves">0</strong></p>
            <p>Tiempo: <strong id="finalTime">00:00</strong></p>
            <p>Puntuación: <strong id="finalScore">0</strong></p>
            <button class="btn btn-primary" onclick="closeModal()">Jugar de Nuevo</button>
        </div>
    </div>

    <script>
        class MemoryGame {
            constructor() {
                this.board = document.getElementById('gameBoard');
                this.movesDisplay = document.getElementById('moves');
                this.timerDisplay = document.getElementById('timer');
                this.scoreDisplay = document.getElementById('score');
                this.winModal = document.getElementById('winModal');
                
                this.difficulty = 'easy';
                this.cards = [];
                this.flippedCards = [];
                this.matchedPairs = 0;
                this.moves = 0;
                this.score = 0;
                this.timer = null;
                this.seconds = 0;
                this.isPaused = false;
                this.isProcessing = false;
                
                this.emojis = {
                    easy: ['🎮', '🎯', '🎨', '🎪', '🎭', '🎸', '🎺', '🎻'],
                    medium: ['🎮', '🎯', '🎨', '🎪', '🎭', '🎸', '🎺', '🎻', '🎲', '🎳', '🎰', '🎱', '🎮', '🎯', '🎨', '🎪', '🎭', '🎸'],
                    hard: ['🎮', '🎯', '🎨', '🎪', '🎭', '🎸', '🎺', '🎻', '🎲', '🎳', '🎰', '🎱', '🎊', '🎉', '🎈', '🎁', '🎀', '🎂', '🍰', '🍕', '🍔', '🍟', '🌮', '🌯', '🍜', '🍝', '🍣', '🍱', '🍤', '🍙', '🍘']
                };
                
                this.init();
            }
            
            init() {
                this.setupEventListeners();
                this.newGame();
            }
            
            setupEventListeners() {
                document.querySelectorAll('.difficulty-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        document.querySelectorAll('.difficulty-btn').forEach(b => b.classList.remove('active'));
                        e.target.classList.add('active');
                        this.difficulty = e.target.dataset.level;
                        this.newGame();
                    });
                });
                
                document.getElementById('newGameBtn').addEventListener('click', () => this.newGame());
                document.getElementById('pauseBtn').addEventListener('click', () => this.togglePause());
            }
            
            newGame() {
                this.resetGame();
                this.createBoard();
                this.startTimer();
            }
            
            resetGame() {
                clearInterval(this.timer);
                this.board.innerHTML = '';
                this.cards = [];
                this.flippedCards = [];
                this.matchedPairs = 0;
                this.moves = 0;
                this.score = 0;
                this.seconds = 0;
                this.isPaused = false;
                this.isProcessing = false;
                
                this.updateDisplay();
                document.getElementById('pauseBtn').textContent = 'Pausar';
            }
            
            createBoard() {
                const emojiSet = this.emojis[this.difficulty];
                const pairs = this.difficulty === 'easy' ? 8 : this.difficulty === 'medium' ? 18 : 32;
                const gameEmojis = emojiSet.slice(0, pairs);
                const cardValues = [...gameEmojis, ...gameEmojis];
                
                // Mezclar cartas
                for (let i = cardValues.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [cardValues[i], cardValues[j]] = [cardValues[j], cardValues[i]];
                }
                
                // Crear elementos de carta
                cardValues.forEach((value, index) => {
                    const card = document.createElement('div');
                    card.className = 'card';
                    card.dataset.value = value;
                    card.dataset.index = index;
                    
                    card.innerHTML = `
                        <div class="card-content card-back">?</div>
                        <div class="card-content card-front">${value}</div>
                    `;
                    
                    card.addEventListener('click', () => this.flipCard(card));
                    this.board.appendChild(card);
                    this.cards.push(card);
                });
            }
            
            flipCard(card) {
                if (this.isPaused || this.isProcessing || 
                    card.classList.contains('flipped') || 
                    card.classList.contains('matched') ||
                    this.flippedCards.length >= 2) {
                    return;
                }
                
                card.classList.add('flipped');
                this.flippedCards.push(card);
                
                if (this.flippedCards.length === 2) {
                    this.moves++;
                    this.updateDisplay();
                    this.checkMatch();
                }
            }
            
            checkMatch() {
                this.isProcessing = true;
                const [card1, card2] = this.flippedCards;
                
                if (card1.dataset.value === card2.dataset.value) {
                    // Match encontrado
                    setTimeout(() => {
                        card1.classList.add('matched');
                        card2.classList.add('matched');
                        this.matchedPairs++;
                        this.score += 100;
                        
                        // Bonus por velocidad
                        if (this.moves < this.matchedPairs * 1.5) {
                            this.score += 50;
                        }
                        
                        this.updateDisplay();
                        this.flippedCards = [];
                        this.isProcessing = false;
                        
                        if (this.matchedPairs === this.cards.length / 2) {
                            this.gameWon();
                        }
                    }, 500);
                } else {
                    // No hay match
                    setTimeout(() => {
                        card1.classList.remove('flipped');
                        card2.classList.remove('flipped');
                        this.flippedCards = [];
                        this.isProcessing = false;
                    }, 1000);
                }
            }
            
            gameWon() {
                clearInterval(this.timer);
                
                // Calcular estrellas basado en rendimiento
                const perfectMoves = this.cards.length / 2;
                const stars = this.moves <= perfectMoves ? '⭐⭐⭐' : 
                             this.moves <= perfectMoves * 1.5 ? '⭐⭐' : '⭐';
                
                // Bonus por tiempo
                const timeBonus = Math.max(0, 300 - this.seconds) * 10;
                this.score += timeBonus;
                
                document.getElementById('stars').textContent = stars;
                document.getElementById('finalMoves').textContent = this.moves;
                document.getElementById('finalTime').textContent = this.formatTime(this.seconds);
                document.getElementById('finalScore').textContent = this.score;
                
                setTimeout(() => {
                    this.winModal.classList.add('show');
                }, 500);
            }
            
            startTimer() {
                this.timer = setInterval(() => {
                    if (!this.isPaused) {
                        this.seconds++;
                        this.updateDisplay();
                    }
                }, 1000);
            }
            
            togglePause() {
                this.isPaused = !this.isPaused;
                document.getElementById('pauseBtn').textContent = this.isPaused ? 'Reanudar' : 'Pausar';
                
                if (this.isPaused) {
                    this.board.style.opacity = '0.5';
                    this.board.style.pointerEvents = 'none';
                } else {
                    this.board.style.opacity = '1';
                    this.board.style.pointerEvents = 'auto';
                }
            }
            
            updateDisplay() {
                this.movesDisplay.textContent = this.moves;
                this.timerDisplay.textContent = this.formatTime(this.seconds);
                this.scoreDisplay.textContent = this.score;
            }
            
            formatTime(seconds) {
                const mins = Math.floor(seconds / 60);
                const secs = seconds % 60;
                return ${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')};
            }
        }
        
        function closeModal() {
            document.getElementById('winModal').classList.remove('show');
            game.newGame();
        }
        
        // Iniciar juego
        const game = new MemoryGame();
    </script>
</body>
</html>
